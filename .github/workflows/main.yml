name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.set_artifact.id }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # Backend dependencies and setup
    - name: Cache backend dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install backend dependencies
      run: |
        npm install
        npm install -g jest

    # Frontend dependencies and setup
    - name: Cache frontend dependencies
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-frontend-

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
        npm install -g eslint
        cd ..

    # Run Tests
    - name: Run Backend Tests
      run: |
        npm test -- --coverage
        
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        cd ..

    # Lint Check
    - name: Run ESLint
      run: |
        cd frontend
        npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0
        cd ..

    # Type Check
    - name: Run TypeScript Check
      run: |
        cd frontend
        npx tsc --noEmit
        cd ..

    # Build Steps
    - name: Build Frontend
      run: |
        cd frontend
        CI=false npm run build
        cd ..

    - name: Build Backend
      run: |
        if [ -f "package.json" ] && grep -q "\"build\":" "package.json"; then
          npm run build
        fi

    # Security Scans
    - name: Run npm audit
      run: |
        npm audit
        cd frontend
        npm audit
        cd ..
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Fintech-Marketplace'
        path: '.'
        format: 'HTML'

    # Docker Build and Push
    - name: Build and Push Docker Image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        kingnorth12: ${{ secrets.DOCKER_USERNAME }}
        Zsexdrcft21@: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        # Build Docker images with different tags
        docker build -t $kingnorth12/fintech-marketplace:${{ github.sha }} .
        docker build -t $kingnorth12/fintech-marketplace:latest .
        
        # Login to Docker Hub
        echo $Zsexdrcft21 | docker login -u $kingnorth12 --password-stdin
        
        # Push images to Docker Hub
        docker push $kingnorth12/fintech-marketplace:${{ github.sha }}
        docker push $kingnorth12/fintech-marketplace:latest

    # Set artifact name
    - name: Set artifact name
      id: set_artifact
      run: echo "::set-output name=artifact_name::build-${{ github.sha }}"

    # Archive build artifacts
    - name: Archive production artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.set_artifact.outputs.artifact_name }}
        path: |
          frontend/build/
          dist/
        retention-days: 5
        if-no-files-found: warn

  deploy:
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    # Download build artifacts
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.test-and-build.outputs.artifact_name }}
        path: dist

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to AWS ECS
      run: |
        aws ecs update-service --cluster fintech-cluster --service fintech-service --force-new-deployment
        
    - name: Health Check
      run: |
        # Wait for deployment to complete
        aws ecs wait services-stable --cluster fintech-cluster --services fintech-service
        
        # Verify application health
        HEALTH_CHECK_URL="${{ secrets.APP_URL }}/health"
        for i in {1..30}; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "Application is healthy!"
            exit 0
          fi
          echo "Waiting for application to be healthy... (Attempt $i/30)"
          sleep 10
        done
        echo "Application failed to become healthy within timeout"
        exit 1 
