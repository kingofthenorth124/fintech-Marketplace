name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # Backend dependencies and setup
    - name: Cache backend dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install backend dependencies
      run: |
        npm install
        npm install -g jest

    # Frontend dependencies and setup
    - name: Cache frontend dependencies
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-frontend-

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
        npm install -g eslint
        cd ..

    # Run Tests
    - name: Run Backend Tests
      run: |
        if grep -q "\"test\":" package.json; then
          npm test -- --coverage
        else
          echo "No test script found in package.json - skipping backend tests"
          exit 0
        fi
        
    - name: Run Frontend Tests
      run: |
        cd frontend
        if grep -q "\"test\":" package.json; then
          npm test -- --coverage --watchAll=false --passWithNoTests
        else
          echo "No test script found in frontend/package.json - skipping frontend tests"
          exit 0
        fi
        cd ..

    # Lint Check
    - name: Run ESLint
      run: |
        cd frontend
        npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0
        cd ..

    # Type Check
    - name: Run TypeScript Check
      run: |
        cd frontend
        npx tsc --noEmit
        cd ..

    # Build Steps
    - name: Build Frontend
      run: |
        cd frontend
        CI=false npm run build
        cd ..

    - name: Build Backend
      run: |
        if [ -f "package.json" ] && grep -q "\"build\":" "package.json"; then
          npm run build
        fi

    # Security Scan
    - name: Run npm audit
      run: |
        npm audit
        cd frontend
        npm audit
        cd ..

  deploy:
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install
        cd frontend
        npm install
        cd ..

    - name: Build application
      run: |
        cd frontend
        npm run build
        cd ..
        npm run build

    - name: Deploy to production
      env:
        DEPLOY_URL: ${{ secrets.DEPLOY_URL }}
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      run: |
        # Add your deployment commands here
        # Example using curl to trigger deployment
        curl -X POST $DEPLOY_URL \
          -H "Authorization: Bearer $DEPLOY_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"version": "${{ github.sha }}"}'

    - name: Verify Deployment
      run: |
        # Wait for deployment to complete
        sleep 30  # Give some time for deployment to propagate
        
        # Check if the application is responding
        if curl -s -f -o /dev/null "${{ secrets.APP_URL }}/health"; then
          echo "Deployment successful and application is responding"
        else
          echo "Deployment verification failed"
          exit 1 
